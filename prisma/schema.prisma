// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://uxmhfry56fssu68k:eitFxmpik1Bw6HguwFwX@b5uqwyttsseik8ffzg6j-mysql.services.clever-cloud.com:3306/b5uqwyttsseik8ffzg6j"
}

// User model for authentication
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  phone     String?
  role      UserRole @default(CUSTOMER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bookings Booking[]

  @@map("users")
}

// Food Cart model
model FoodCart {
  id          String   @id @default(cuid())
  name        String
  description String   @db.Text
  image       String?  @db.Text
  location    String
  isActive    Boolean  @default(true)
  pricePerHour Float    // Keep for backward compatibility, now represents base price for up to 4 hours
  extraHourPrice Float @default(0) // Price per extra hour beyond 4 hours
  shippingPrice Float @default(0) // Shipping/delivery price
  pickupAvailable Boolean @default(true) // Whether pickup is available
  shippingAvailable Boolean @default(true) // Whether shipping/delivery is available
  capacity    Int      @default(50) // max people this cart can serve food to
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  foodItems FoodItem[]
  bookings  Booking[]
  availability CartAvailability[]
  services  Service[]

  @@map("food_carts")
}

// Food Items available in each cart
model FoodItem {
  id          String   @id @default(cuid())
  name        String
  description String   @db.Text
  price       Float
  image       String?  @db.Text
  category    String
  isAvailable Boolean  @default(true)
  cartId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  cart         FoodCart       @relation(fields: [cartId], references: [id], onDelete: Cascade)
  bookingItems BookingItem[]

  @@map("food_items")
}

// Services available for each cart
model Service {
  id          String          @id @default(cuid())
  name        String          // "Waiter", "Chef", "Worker", etc.
  description String          @db.Text
  pricePerHour Float
  category    ServiceCategory
  isActive    Boolean         @default(true)
  cartId      String?         // Optional: service specific to a cart (null = global)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  cart            FoodCart?       @relation(fields: [cartId], references: [id], onDelete: Cascade)
  bookingServices BookingService[]

  @@map("services")
}

// Cart availability schedule
model CartAvailability {
  id        String   @id @default(cuid())
  cartId    String
  date      DateTime @db.Date
  startTime String   // "09:00"
  endTime   String   // "18:00"
  isBooked  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cart FoodCart @relation(fields: [cartId], references: [id], onDelete: Cascade)

  @@unique([cartId, date, startTime])
  @@map("cart_availability")
}

// Main booking model - One booking can have multiple dates
model Booking {
  id          String        @id @default(cuid())
  userId      String?       // Optional since we're not managing users
  cartId      String
  
  // Legacy fields for backward compatibility (will use first BookingDate if available)
  bookingDate DateTime?     @db.Date
  startTime   String?       // "14:00" - Now user customizable
  endTime     String?       // "18:00" - Now user customizable
  totalHours  Int?          // Calculated from custom times
  
  totalAmount Float
  status      BookingStatus @default(PENDING)
  
  // Enhanced timing options
  isCustomTiming Boolean @default(true)  // True for custom times, false for preset slots
  timeSlotType  String?                  // "morning", "afternoon", "evening" for preset slots, or "multi-day-24h"
  
  // Enhanced pricing breakdown
  cartServiceAmount Float @default(0)    // Amount for cart rental
  servicesAmount    Float @default(0)    // Amount for additional services
  foodAmount        Float @default(0)    // Amount for food items
  
  // Customer information
  customerFirstName String
  customerLastName  String
  customerEmail     String
  customerPhone     String
  customerAddress   String
  customerCity      String
  customerState     String
  customerZip       String
  customerCountry   String   @default("United States")
  eventType         String?  // birthday, wedding, corporate, etc.
  guestCount        Int
  specialNotes      String?  @db.Text
  
  // Delivery information
  deliveryMethod String       @default("pickup") // "pickup" or "shipping"
  shippingAddress String?
  shippingCity   String?
  shippingState  String?
  shippingZip    String?
  shippingAmount Float        @default(0)
  
  // Payment information
  paymentStatus PaymentStatus @default(PENDING)
  paymentMethod String?
  transactionId String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user         User?         @relation(fields: [userId], references: [id])
  cart         FoodCart      @relation(fields: [cartId], references: [id])
  bookingItems BookingItem[]
  bookingServices BookingService[]
  bookingDates BookingDate[] // NEW: Multiple dates per booking
  paymentSlip  PaymentSlip?

  @@map("bookings")
}

// Booking dates - Multiple dates can belong to one booking
model BookingDate {
  id          String   @id @default(cuid())
  bookingId   String
  date        DateTime @db.Date
  startTime   String   // "14:00"
  endTime     String   // "18:00" 
  totalHours  Int      // Hours for this specific date
  cartCost    Float    // Cost for this specific date
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@unique([bookingId, date, startTime]) // Prevent duplicate time slots for same booking
  @@map("booking_dates")
}

// Items ordered in each booking
model BookingItem {
  id         String   @id @default(cuid())
  bookingId  String
  foodItemId String
  quantity   Int
  price      Float    // price at time of booking
  createdAt  DateTime @default(now())

  booking  Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  foodItem FoodItem @relation(fields: [foodItemId], references: [id], onDelete: Cascade)

  @@map("booking_items")
}



// Services selected for each booking
model BookingService {
  id        String   @id @default(cuid())
  bookingId String
  serviceId String
  quantity  Int      @default(1) // number of staff for this service
  hours     Int      // hours booked for this service
  pricePerHour Float // price per hour at time of booking
  totalPrice Float   // quantity * hours * pricePerHour
  createdAt DateTime @default(now())

  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@map("booking_services")
}

// Enums
enum UserRole {
  ADMIN
  CUSTOMER
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum ServiceCategory {
  STAFF       // Waiters, servers
  KITCHEN     // Chefs, cooks
  SUPPORT     // Workers, setup crew
  MANAGEMENT  // Event coordinators
  SPECIAL     // Special services
}

enum SlipStatus {
  PENDING     // Uploaded, waiting for verification
  VERIFIED    // Admin verified the payment
  REJECTED    // Admin rejected the payment
}

// Payment configuration stored by admin
model PaymentConfig {
  id          String   @id @default(cuid())
  environment String   @default("live") // "live" or "sandbox"
  clientId    String
  clientSecret String
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())

  @@map("payment_config")
}

// Bank transfer configuration
model BankConfig {
  id              String   @id @default(cuid())
  bankName        String
  accountHolder   String
  iban            String
  swiftCode       String?
  accountNumber   String?
  bankAddress     String?
  instructions    String?  @db.Text
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("bank_config")
}

// Payment slip uploads for bank transfers
model PaymentSlip {
  id            String        @id @default(cuid())
  bookingId     String        @unique
  fileName      String
  filePath      String
  fileSize      Int
  mimeType      String
  uploadedAt    DateTime      @default(now())
  verifiedAt    DateTime?
  verifiedBy    String?       // Admin user ID who verified
  status        SlipStatus    @default(PENDING)
  adminNotes    String?       @db.Text
  
  booking       Booking       @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("payment_slips")
}
