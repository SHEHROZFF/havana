generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String
  phone     String?
  role      UserRole  @default(CUSTOMER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  bookings  Booking[]

  @@map("users")
}

model FoodCart {
  id                String             @id @default(cuid())
  name              String
  description       String             @db.Text
  image             String?            @db.Text
  location          String
  isActive          Boolean            @default(true)
  pricePerHour      Float
  extraHourPrice    Float              @default(0)
  capacity          Int                @default(50)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  pickupAvailable   Boolean            @default(true)
  shippingAvailable Boolean            @default(true)
  shippingPrice     Float              @default(0)
  bookings          Booking[]
  availability      CartAvailability[]
  foodItems         FoodItem[]
  services          Service[]

  @@map("food_carts")
}

model FoodItem {
  id           String        @id @default(cuid())
  name         String
  description  String        @db.Text
  price        Float
  image        String?       @db.Text
  category     String
  isAvailable  Boolean       @default(true)
  cartId       String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  bookingItems BookingItem[]
  cart         FoodCart      @relation(fields: [cartId], references: [id], onDelete: Cascade)

  @@index([cartId], map: "food_items_cartId_fkey")
  @@map("food_items")
}

model Service {
  id              String           @id @default(cuid())
  name            String
  description     String           @db.Text
  pricePerHour    Float
  category        ServiceCategory
  isActive        Boolean          @default(true)
  cartId          String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  bookingServices BookingService[]
  cart            FoodCart?        @relation(fields: [cartId], references: [id], onDelete: Cascade)

  @@index([cartId], map: "services_cartId_fkey")
  @@map("services")
}

model CartAvailability {
  id        String   @id @default(cuid())
  cartId    String
  date      DateTime @db.Date
  startTime String
  endTime   String
  isBooked  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      FoodCart @relation(fields: [cartId], references: [id], onDelete: Cascade)

  @@unique([cartId, date, startTime])
  @@map("cart_availability")
}

model Booking {
  id                String           @id @default(cuid())
  userId            String?
  cartId            String
  bookingDate       DateTime?        @db.Date
  startTime         String?
  endTime           String?
  totalHours        Int?
  totalAmount       Float
  status            BookingStatus    @default(PENDING)
  isCustomTiming    Boolean          @default(true)
  timeSlotType      String?
  cartServiceAmount Float            @default(0)
  servicesAmount    Float            @default(0)
  foodAmount        Float            @default(0)
  customerEmail     String
  customerPhone     String
  eventType         String?
  guestCount        Int
  specialNotes      String?          @db.Text
  paymentStatus     PaymentStatus    @default(PENDING)
  paymentMethod     String?
  transactionId     String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  deliveryMethod    String           @default("pickup")
  shippingAddress   String?
  shippingAmount    Float            @default(0)
  shippingCity      String?
  shippingState     String?
  shippingZip       String?
  customerAddress   String
  customerCity      String
  customerCountry   String           @default("United States")
  customerFirstName String
  customerLastName  String
  customerState     String
  customerZip       String
  couponCode        String?
  discountAmount    Float            @default(0)
  originalAmount    Float?
  bookingDates      BookingDate[]
  bookingItems      BookingItem[]
  bookingServices   BookingService[]
  cart              FoodCart         @relation(fields: [cartId], references: [id])
  user              User?            @relation(fields: [userId], references: [id])
  couponUsage       CouponUsage?
  paymentSlip       PaymentSlip?

  @@index([cartId], map: "bookings_cartId_fkey")
  @@index([userId], map: "bookings_userId_fkey")
  @@map("bookings")
}

model BookingDate {
  id          String   @id @default(cuid())
  bookingId   String
  date        DateTime @db.Date
  startTime   String
  endTime     String
  totalHours  Int
  cartCost    Float
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  booking     Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@unique([bookingId, date, startTime])
  @@map("booking_dates")
}

model BookingItem {
  id         String   @id @default(cuid())
  bookingId  String
  foodItemId String
  quantity   Int
  price      Float
  createdAt  DateTime @default(now())
  booking    Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  foodItem   FoodItem @relation(fields: [foodItemId], references: [id], onDelete: Cascade)

  @@index([bookingId], map: "booking_items_bookingId_fkey")
  @@index([foodItemId], map: "booking_items_foodItemId_fkey")
  @@map("booking_items")
}

model BookingService {
  id           String   @id @default(cuid())
  bookingId    String
  serviceId    String
  quantity     Int      @default(1)
  hours        Int
  pricePerHour Float
  totalPrice   Float
  createdAt    DateTime @default(now())
  booking      Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  service      Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@index([bookingId], map: "booking_services_bookingId_fkey")
  @@index([serviceId], map: "booking_services_serviceId_fkey")
  @@map("booking_services")
}

model PaymentConfig {
  id           String   @id @default(cuid())
  environment  String   @default("live")
  clientId     String
  clientSecret String
  updatedAt    DateTime @updatedAt
  createdAt    DateTime @default(now())

  @@map("payment_config")
}

model BankConfig {
  id            String   @id @default(cuid())
  bankName      String
  accountHolder String
  iban          String
  swiftCode     String?
  accountNumber String?
  bankAddress   String?
  instructions  String?  @db.Text
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("bank_config")
}

model PaymentSlip {
  id         String     @id @default(cuid())
  bookingId  String     @unique
  fileName   String
  filePath   String
  fileSize   Int
  mimeType   String
  uploadedAt DateTime   @default(now())
  verifiedAt DateTime?
  verifiedBy String?
  status     SlipStatus @default(PENDING)
  adminNotes String?    @db.Text
  booking    Booking    @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("payment_slips")
}

model Coupon {
  id                     String        @id @default(cuid())
  code                   String        @unique
  name                   String
  description            String?       @db.Text
  type                   CouponType
  value                  Float
  minOrderAmount         Float?
  maxDiscount            Float?
  usageLimit             Int?
  usageCount             Int           @default(0)
  validFrom              DateTime
  validUntil             DateTime
  status                 CouponStatus  @default(ACTIVE)
  applicableToCartIds    String?       @db.Text
  applicableToServiceIds String?       @db.Text
  createdBy              String?
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt
  usages                 CouponUsage[]

  @@map("coupons")
}

model CouponUsage {
  id             String   @id @default(cuid())
  couponId       String
  bookingId      String   @unique
  customerEmail  String
  discountAmount Float
  usedAt         DateTime @default(now())
  booking        Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  coupon         Coupon   @relation(fields: [couponId], references: [id], onDelete: Cascade)

  @@index([couponId], map: "coupon_usages_couponId_fkey")
  @@map("coupon_usages")
}

enum UserRole {
  ADMIN
  CUSTOMER
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum ServiceCategory {
  STAFF
  KITCHEN
  SUPPORT
  MANAGEMENT
  SPECIAL
}

enum SlipStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum CouponType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum CouponStatus {
  ACTIVE
  INACTIVE
  EXPIRED
}
